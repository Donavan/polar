<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <style>
    div.chart_container {
      position: relative;
    }

    div.overlay {
      position: absolute;
      left: 50px;
      z-index: 2;
    }

    div.chart {
      position: absolute;
      z-index: 0;
      left: 50px;
      background-color: rgba(255, 255, 255, 0);
    }

    div.ticks {
      position: absolute;
      left: 50px;
      z-index: 1;
      background-color: rgba(255, 255, 255, 0);
    }

    row {
      margin-top: 400px;
      padding-top: 100px;
    }

  </style>
</head>
<body>
<div class="container">
  <!-- Render the Overall Chart -->
  <div class='row'>
    <div class='col-lg-6'>
      <h2>Overall</h2>
      <div class='chart_container' height="450">
        <div width="800" height="450" class='chart'>
          <canvas id="myChartOverall" width="800" height="450" class='content'></canvas>
        </div>
        <div width="800" height="450" class='overlay'>
          <canvas id="myOverlayOverall" width="800" height="450"></canvas>
        </div>
        <div width="800" height="450" class='ticks'>
          <canvas id="myTicksOverall" width="800" height="450"></canvas>
        </div>
      </div>
      <script>
          var ctxOverall = document.getElementById("myChartOverall").getContext("2d");
          var overlayCtxOverall = document.getElementById("myOverlayOverall").getContext("2d");
          var ticksCtxOverall = document.getElementById("myTicksOverall").getContext("2d");

          // This is the actual data being plotted.
          // The only relevant bits are the background colors and the data values
          dataOverall = {
              datasets: [
                  {
                      label: "Score",
                      data: [<%= overall[:values].join(',') %>],
                      backgroundColor: ["#ffff00", "#00ffff", "#ff00ff", "#0000ff", "#ff0000",
                          "#00ff00", "#F00099", "#f09900", "#99F000"
                      ],
                      borderColor: ["#000000", "#000000", "#000000", "#000000", "#000000",
                          "#000000", "#000000", "#000000", "#000000"
                      ]
                  }
              ]
          };
          optionsOverall = {
              scale: {
                  display: false
              }
          };


          // This provides layer gives us the dividing border lines.
          // The data values for this are all set to 1.0 and the background
          // color is transparent so that the colors from the content layer
          // can show through.
          ///
          // this layer is drawn last.
          overlayDataOverall = {
              datasets: [
                  {
                      label: "Score",
                      data: [<%= overall[:ranges] %>],
                      backgroundColor: [
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)",
                          "rgba(255,0,0,0.0)"
                      ],
                      borderColor: [
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000",
                          "#000000"
                      ]
                  }
              ]
          };
          overlayOptionsOverall = {
              scale: {
                  display: false
              }
          };


          // This layer provides the tick marks, it's drawn between the content and
          // the overlay.  The data values are all set to zero so that we get tick
          // marks all the way to the center, even where there's data
          //
          ticksDataOverall = {
              datasets: [
                  {
                      label: "Score",
                      data: [<%= overall[:ticks] %>],
                  }
              ]
          };
          ticksOptionsOverall = {
              scale: {
                  display: true,

                  ticks: {
                      beginAtZero: true,
                      max: 1,
                      callback: function (value, index, values) {
                          return "";
                      }
                  }
              }
          };

          new Chart(ctxOverall, {
              data: dataOverall,
              type: "polarArea",
              options: optionsOverall
          });

          new Chart(overlayCtxOverall, {
              data: overlayDataOverall,
              type: "polarArea",
              options: overlayOptionsOverall
          });

          new Chart(ticksCtxOverall, {
              data: ticksDataOverall,
              type: "polarArea",
              options: ticksOptionsOverall
          });

      </script>
    </div>
  </div>
  <div class='row'>
    <br><br><br><br><br><br><br><br><br><br><br><br>
    <br><br><br><br><br><br><br><br><br><br><br><br>
  </div>


  <% scored.each do |k, v| %>
    <!-- Render the category -->
    <div class='row'>
      <div class='col-lg-6'>
        <h2><%= k %></h2>
        <div class='chart_container' height="450">
          <div width="800" height="450" class='chart'>
            <canvas id="myChart<%= k.gsub(' ', '-') %>" width="800" height="450" class='content'></canvas>
          </div>
          <div width="800" height="450" class='overlay'>
            <canvas id="myOverlay<%= k.gsub(' ', '-') %>" width="800" height="450"></canvas>
          </div>
          <div width="800" height="450" class='ticks'>
            <canvas id="myTicks<%= k.gsub(' ', '-') %>" width="800" height="450"></canvas>
          </div>
        </div>
        <script>
            var ctx = document.getElementById("myChart<%= k.gsub(' ', '-') %>").getContext("2d");
            var overlayCtx = document.getElementById("myOverlay<%= k.gsub(' ', '-') %>").getContext("2d");
            var ticksCtx = document.getElementById("myTicks<%= k.gsub(' ', '-') %>").getContext("2d");

            // This is the actual data being plotted.
            // The only relevant bits are the background colors and the data values
            data = {
                datasets: [
                    {
                        label: "Score",
                        data: [<%= v[:scores] %>],
                        backgroundColor: ["#ffff00", "#00ffff", "#ff00ff", "#0000ff", "#ff0000",
                            "#00ff00", "#F00099", "#f09900", "#99F000"
                        ],
                        borderColor: ["#000000", "#000000", "#000000", "#000000", "#000000",
                            "#000000", "#000000", "#000000", "#000000"
                        ]
                    }
                ]
            };
            options = {
                scale: {
                    display: false
                }
            };


            // This provides layer gives us the dividing border lines.
            // The data values for this are all set to 1.0 and the background
            // color is transparent so that the colors from the content layer
            // can show through.
            ///
            // this layer is drawn last.
            overlayData = {
                datasets: [
                    {
                        label: "Score",
                        data: [<%= v[:ranges] %>],
                        backgroundColor: [
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)",
                            "rgba(255,0,0,0.0)"
                        ],
                        borderColor: [
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000",
                            "#000000"
                        ]
                    }
                ]
            };
            overlayOptions = {
                scale: {
                    display: false
                }
            };


            // This layer provides the tick marks, it's drawn between the content and
            // the overlay.  The data values are all set to zero so that we get tick
            // marks all the way to the center, even where there's data
            //
            ticksData = {
                datasets: [
                    {
                        label: "Score",
                        data: [<%= v[:ticks] %>],
                    }
                ]
            };
            ticksOptions = {
                scale: {
                    display: true,

                    ticks: {
                        beginAtZero: true,
                        max: 1,
                        callback: function (value, index, values) {
                            return "";
                        }
                    }
                }
            };

            new Chart(ctx, {
                data: data,
                type: "polarArea",
                options: options
            });

            new Chart(overlayCtx, {
                data: overlayData,
                type: "polarArea",
                options: overlayOptions
            });

            new Chart(ticksCtx, {
                data: ticksData,
                type: "polarArea",
                options: ticksOptions
            });

        </script>
      </div>
    </div>
    <div class='row'>
      <br><br><br><br><br><br><br><br><br><br><br><br>
      <br><br><br><br><br><br><br><br><br><br><br><br>
    </div>
    <!-- Render each sub category -->
    <% v.each do | sc_name, sc| %>
      <% next unless sc.is_a?(Hash) %>
      <div class='row'>
        <div class='col-lg-6'>
          <h2><%= "#{k} - #{sc_name}" %></h2>
          <% var_key = "#{k.gsub(' ', '-').gsub('/', '')}#{sc_name.gsub(' ', '-').gsub('/', '')}" %>
          <div class='chart_container' height="450">
            <div width="800" height="450" class='chart'>
              <canvas id="myChart<%= var_key %>" width="800" height="450" class='content'></canvas>
            </div>
            <div width="800" height="450" class='overlay'>
              <canvas id="myOverlay<%= var_key %>" width="800" height="450"></canvas>
            </div>
            <div width="800" height="450" class='ticks'>
              <canvas id="myTicks<%= var_key %>" width="800" height="450"></canvas>
            </div>
          </div>
          <script>
              var ctx = document.getElementById("myChart<%= var_key %>").getContext("2d");
              var overlayCtx = document.getElementById("myOverlay<%= var_key %>").getContext("2d");
              var ticksCtx = document.getElementById("myTicks<%= var_key %>").getContext("2d");

              // This is the actual data being plotted.
              // The only relevant bits are the background colors and the data values
              data = {
                  datasets: [
                      {
                          label: "Score",
                          data: [<%= sc[:values] %>],
                          backgroundColor: ["#ffff00", "#00ffff", "#ff00ff", "#0000ff", "#ff0000",
                              "#00ff00", "#F00099", "#f09900", "#99F000"
                          ],
                          borderColor: ["#000000", "#000000", "#000000", "#000000", "#000000",
                              "#000000", "#000000", "#000000", "#000000"
                          ]
                      }
                  ]
              };
              options = {
                  scale: {
                      display: false
                  }
              };


              // This provides layer gives us the dividing border lines.
              // The data values for this are all set to 1.0 and the background
              // color is transparent so that the colors from the content layer
              // can show through.
              ///
              // this layer is drawn last.
              overlayData = {
                  datasets: [
                      {
                          label: "Score",
                          data: [<%= sc[:ranges] %>],
                          backgroundColor: [
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)",
                              "rgba(255,0,0,0.0)"
                          ],
                          borderColor: [
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000",
                              "#000000"
                          ]
                      }
                  ]
              };
              overlayOptions = {
                  scale: {
                      display: false
                  }
              };


              // This layer provides the tick marks, it's drawn between the content and
              // the overlay.  The data values are all set to zero so that we get tick
              // marks all the way to the center, even where there's data
              //
              ticksData = {
                  datasets: [
                      {
                          label: "Score",
                          data: [<%= sc[:ticks] %>],
                      }
                  ]
              };
              ticksOptions = {
                  scale: {
                      display: true,

                      ticks: {
                          beginAtZero: true,
                          max: 1,
                          callback: function (value, index, values) {
                              return "";
                          }
                      }
                  }
              };

              new Chart(ctx, {
                  data: data,
                  type: "polarArea",
                  options: options
              });

              new Chart(overlayCtx, {
                  data: overlayData,
                  type: "polarArea",
                  options: overlayOptions
              });

              new Chart(ticksCtx, {
                  data: ticksData,
                  type: "polarArea",
                  options: ticksOptions
              });

          </script>
        </div>
      </div>
      <!-- Spacer for the next row-->
      <div class='row'>
        <br><br><br><br><br><br><br><br><br><br><br><br>
        <br><br><br><br><br><br><br><br><br><br><br><br>
      </div>
    <% end %>
  <% end %>

</div>
</body>
</html>